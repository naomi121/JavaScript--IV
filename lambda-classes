// CODE here for your Lambda Classes

class Person {

    constructor(personAttr) {

        this.name = personAttr.name;

        this.age = personAttr.age;

        this.location = personAttr.location;

        this.gender = personAttr.gender;

    }



    speak() {

        return `Hello my name is ${this.name}, I am from ${this.location}.`;

    }

}



class Instructor extends Person {

    constructor(instructorAttr) {

        super(instructorAttr);

        this.specialty = instructorAttr.specialty;

        this.favLanguage = instructorAttr.favLanguage;

        this.catchPhrase = instructorAttr.catchPhrase;

    }



    // `demo` receives a `subject` string as an argument and logs out the phrase 

    // 'Today we are learning about {subject}' where subject is the param passed in.

    demo(subject) {

        return `Today we are learning about ${subject}.`;

    }



    // `grade` receives a `student` object and a `subject` string as arguments and 

    // logs out '{student.name} receives a perfect score on {subject}'

    grade(student, subject) {

        return `${student.name} receives a perfect score on ${subject}.`;

    }



    gradeStudents(student) {

        let random = (Math.floor(Math.random()*20)) * (Math.random() > 0.5 ? 1 : -1);

        student.grade += random;

        student.grade >= 100 ? student.grade = 100 : student.grade + 1;

    };

}



class Student extends Person {

    constructor(studentAttr) {

        super(studentAttr);

        this.previousBackground = studentAttr.previousBackground;

        this.className = studentAttr.className;

        this.favSubjects = studentAttr.favSubjects;

        this.grade = studentAttr.grade;

    }



    // `listsSubjects` a method that logs out all of the student's favoriteSubjects one by one.

    listsSubjects() {

        this.favSubjects.forEach(function(subject) {

            console.log(`One favorite subject is: ${subject}`);

        });

    }



    // `PRAssignment` a method that receives a subject as an argument and logs out that the 

    // `student.name has submitted a PR for {subject}`

    PRAssignment(subject) {

        return `${this.name} has submitted a PR for ${subject}.`;

    }



    // `sprintChallenge` similar to PRAssignment but logs out 

    // `student.name has begun sprint challenge on {subject}`

    sprintChallenge(subject) {

        return `${this.name} has begun sprint challenge on ${subject}.`;

    }



    checkGraduation() {

        const graduate = `${this.name} has received a grade of ${this.grade} and chris rodriguez ordains that he is ready to graduate from Lambda School! 🍻`;

        const dontGraduate = `${this.name} needs to study more to graduate. Better luck next time.`;

        return this.grade >= 70 ? graduate : dontGraduate;

    }

}



class ProjectManager extends Instructor {

    constructor(pmAttr) {

        super(pmAttr);

        this.gradClassName = pmAttr.gradClassName;

        this.favInstructor = pmAttr.favInstructor;

    }



    // `standUp` a method that takes in a slack channel and logs `{name} announces to {channel}, 

    // @channel standy times!​​​​​

    standUp(channel) {

        return `${this.name} announces to ${channel}: #${channel} standy times!​​​​​`;

    }



    // `debugsCode` a method that takes in a student object and a subject and logs out `{name} debugs 

    // {student.name}'s code on {subject}`    

    debugsCode(student, subject) {

        return `${this.name} debugs ${student.name}'s code on ${subject}`;

    }

}



const DavidT = new Person ({

    name: "David Thomas",

    age: 30,

    location: "San Francisco",

    gender: "Male",

});



DavidT.speak();



const Naomi = new Student ({

    name: "Naomi Rodriguez",

    age: 22,

    location: "Orlando",

    gender: "Female",

    previousBackground: "College Student",

    className: "WEB23",

    favSubjects: ["Science", "Computer Science", "Psychology"],

    grade: 97,

});



console.log(Naomi.speak());

console.log(Naomi.listsSubjects());

console.log(Naomi.PRAssignment("Css"));

console.log(Naomi.sprintChallenge("React"));

console.log(Naomi.grade)



const David = new ProjectManager ({

    name: "David Thomas",

    age: 25,

    location: "Queens",

    gender: "Male",

    specialty: "Software Engineering",

    favLanguage: "Css",

    catchPhrase: "Live Long And Prosper!",

    gradClassName: "CS",

    favInstructor: "Brit",

});



const Brit = new Instructor ({

    name: "Manny Rodriguez",

    age: 40,

    location: "Texas",

    gender: "Male",

    specialty: "Web Development",

    favLanguage: "React",

    catchPhrase: "You Shall Not Pass!",

});


